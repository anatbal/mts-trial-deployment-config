name: Terraform Plan and Apply for Trials

on:
  push:
  workflow_dispatch:
    inputs:
      trialDefinitionPath:
        description: Path to definition file of trial environment to deploy
        required: false

jobs:
  check-files-correctness:
    name: "Verify files are in expected format"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Validate Trial Definition (YML)
        id: validate_definiton_yml
        env:
          INPUT_SCHEMA: .ci/definition-schema.json
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset

          sudo npm install -g ajv-cli

          export FILES=$(find . -name 'definition.yml')
          for FILE in $(echo "$FILES" | sed "s/,/ /g")
          do
               ajv validate -s $INPUT_SCHEMA -d "$FILE"
          done

      - name: Validate micro-services config files
        id: validate_config_files_yml
        env:
          INIT_SCHEMA: .ci/init-service-trial-schema.json
          PRACTITIONER_SCHEMA: .ci/practitioner-service-configuration-schema.json
          SITE_SCHEMA: .ci/site-service-configuration-schema.json
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset

          export FILES=$(find . -name 'init-service-*.yml')
          for FILE in $(echo "$FILES" | sed "s/,/ /g")
          do
               ajv validate -s $INIT_SCHEMA -d "$FILE"
          done

          export FILES=$(find . -name 'practitioner-service-*.yml')
          for FILE in $(echo "$FILES" | sed "s/,/ /g")
          do
               ajv validate -s $PRACTITIONER_SCHEMA -d "$FILE"
          done

          export FILES=$(find . -name 'site-service-*.yml')
          for FILE in $(echo "$FILES" | sed "s/,/ /g")
          do
               ajv validate -s $SITE_SCHEMA -d "$FILE"
          done

      - name: Terraform Format
        working-directory: './terraform'
        run: terraform fmt --recursive -check

  prepare-run-matrix:
    name: Detect changed definitions and prepare matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      is_empty_matrix: ${{ steps.set-matrix.outputs.is_empty_matrix }}
    steps:
      - uses: actions/checkout@v2

      # Get a list of changed .yaml files
      - name: Check changed files
        id: calc_files_diff
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # We may be passed the path of a specific trial definition if the deployment
          # was manually triggered via workflow_dispatch, rather than by PR.
          # If not passed, calculate changed files as normal.
          if [[ -z "${{github.event.inputs.trialDefinitionPath}}" ]]; then
            git fetch origin main:localmain

            # Gets changed yaml files excluding the json schema
            export FILES=$(git diff --diff-filter ACMR --name-only localmain | grep definition.yml)

            # if this branch was not marked as a deploy branch, we do not allow
            # changing any of the 'protected' envs
            if [[ ${{ github.ref }} == *"/deploy/"* ]]
            then
              echo "Allowed to deploy to protected branches"
            else
              echo $FILES >> filesLst
              if grep -q qa2 filesLst
              then
                echo "Either you changed a trial by mistake or the branch name is incorrect. use deploy/xxx"
                exit 1
              fi
            fi
          else
            export FILES=${{github.event.inputs.trialDefinitionPath}}
          fi

          echo "Files changed since last commit..."
          echo "$FILES"

          # Escape newlines (replace \n with %0A)
          echo "::set-output name=diff::$( echo "$FILES" | sed ':a;N;$!ba;s/\n/%0A/g' )"

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      # Create an execution plan, which includes each found file
      - name: Set matrix for TF plan and apply
        id: set-matrix
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          FILES="${{ steps.calc_files_diff.outputs.diff }}"
          JSON="{\"include\":["

          # Iterate diff files and add each for the run matrix
          while read path; do

            # if no file was changed. all values are empty, and the matrix should be empty
            if [ -z "$path" ]
            then
              echo "::set-output name=is_empty_matrix::true"
              echo "No definition (json) files were changed. will skip ALL TF jobs."
              break
            else
              echo "::set-output name=is_empty_matrix::false"
            fi

            echo "current definition file path: $path"

            # Extract values for the trial
            trial_name=$(yq eval '.name' ./$path)
            definition_path=$(realpath $path)
            trial_dir=$(dirname $definition_path)

            # Check that trial name in the json equals to its folder name.
            last_dir_name=$(basename $trial_dir)
            if [[ "$last_dir_name" != "$trial_name" ]]
            then
              echo "ERROR: trial name (${trial_name}) is not equal to its folder (${last_dir_name})." >&2
              exit 1
            fi

            # Prepare the matrix item
            MatrixItem="{\"trial_name\": \"$trial_name\", \"trial_dir\": \"$trial_dir\", \"definition_path\": \"$definition_path\",},"

            JSON="$JSON$MatrixItem"
          done <<< "$FILES"

          # Remove last "," and add closing brackets
          if [[ $JSON == *, ]]; then
            JSON="${JSON%?}"
          fi
          JSON="$JSON]}"
          echo $JSON

          # Set output
          echo "::set-output name=matrix::$( echo "$JSON" )"

  deploy:
    name: "Execute Terraform"
    needs: [prepare-run-matrix, check-files-correctness]
    if: ${{ needs.prepare-run-matrix.outputs.is_empty_matrix == 'false' }}
    strategy:
      max-parallel: 1
      matrix: ${{fromJson(needs.prepare-run-matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './terraform'
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}
      UI_BUNDLE : https://github.com/NDPH-ARTS/mts-trial-ui/releases/latest/download/mts-trial-ui.zip
    steps:
      - uses: actions/checkout@v2

      - name: Install yq
        run: |
          echo "${{ matrix.definition_path }}"
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate Config Server settings
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # Validate that the config server properties are set correctly
          echo "hello ${{ matrix.trials.definition_path }}"
          config_label=$(yq eval ".spring_config_label" ${{ matrix.trials.definition_path }})
          config_search_path=$(yq eval '.spring_cloud.config_server.search_paths | split(",") | .[0]' ${{ matrix.trials.definition_path }})

          echo "fetching the config branch..."
          git fetch origin ${config_label}

          echo "Try to get a file the config server will need..."
          set +o errexit
          git cat-file -e "origin/${config_label}:${config_search_path}/application.yml"
          return_value=$?
          set -o errexit

          if [ ${return_value} -eq 0 ]
          then
            echo "Folder defined in the search path (${config_search_path}) was found on the label/branch (${config_label})."
          else
            echo "ERROR: Spring Cloud Config is likely to fail! Folder defined in the search path (${config_search_path}) does not exist on the label/branch (${config_label})." >&2
            exit 1
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform workspace
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # github ref comes with "/" which is not valid for workspace names
          ref_for_workspace="${GITHUB_REF//\//_}"
          workspace_name="${{ matrix.trials.trial_name }}-${ref_for_workspace}"
          terraform workspace select ${workspace_name} || terraform workspace new ${workspace_name}

      - name: Prepare deployment variables
        env:
          TFVARS_TEMPLATE: 'tfvars.template.yml'
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # yq doesn't support functions so we convert to json and use jq
          yq eval -j ${TFVARS_TEMPLATE} | jq -r 'to_entries[] | [.key, .value] | @tsv' |
          while IFS=$'\t' read -r var_name property_path
          do
            property_value=$(yq eval ${property_path} ${{ matrix.trials.definition_path }})
            echo "${var_name}=\"${property_value}\"" >> ${{ matrix.trials.trial_name }}.tfvars
          done

          echo "is_failover_deployment=\"${{matrix.is_failover}}\"" >> ${{ matrix.trials.trial_name }}.tfvars
          cat ${{ matrix.trials.trial_name }}.tfvars

          # extract more values from the definition file to inject to the ui resources
          echo "tenant_id=$(yq eval '.tenant_id' ${{ matrix.trials.definition_path }})" >> $GITHUB_ENV
          echo "ui_client_id=$(yq eval '.ui_client_id' ${{ matrix.trials.definition_path }})" >> $GITHUB_ENV

      # Prepare versions json, write it to assets directory
      - name: Prepare versions json
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset

          echo "Preparing versions json for injection into UI - read ${{ matrix.trials.definition_path }} write ${{ matrix.trials.trial_name }}_versions.json "

          # Use YQ to convert definition.yml to json, use JQ to recurse through the json finding image_tag nodes and their keys, write to a file
          yq eval -j ${{ matrix.trials.definition_path }} | jq '[ ..  | objects | to_entries  | .[] | select(.value | has("image_tag"))? | {service:.key, version:.value.image_tag, timestamp:now} ] | .+ [{service:"UI", version:env.UI_BUNDLE, timestamp:now} ] ' >> ${{ matrix.trials.trial_dir }}/assets/versions.json

          cat ${{ matrix.trials.trial_dir }}/assets/versions.json


      # Plan TF
      - name: Terraform plan
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          terraform plan -out=tfplan -var-file=${{ matrix.trials.trial_name }}.tfvars \
            -var="owner=${{ github.actor }}" \
            -var="github_ref=${{ github.ref }}"

      # Apply, only on merge to main
      - name: Terraform apply
        # if: github.ref == 'refs/heads/main'
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          echo "Merged to main. applying trial's RG"
          terraform apply -auto-approve tfplan

          # '-raw' is important so no other characters will be added
          ui_storage_conn_string=$(terraform output -raw ui_conn_string)
          init_storage_conn_string=$(terraform output -raw init_storage_conn_string)
          echo "init_storage_conn_string=$init_storage_conn_string" >> $GITHUB_ENV
          init_storage_share_name=$(terraform output -raw init_storage_share_name)
          echo "init_storage_share_name=$init_storage_share_name" >> $GITHUB_ENV

          gateway_host_string=$(terraform output -raw gateway_host)
          # create an env var from the connection string, so will be available for the later steps
          echo "ui_storage_conn_string=$ui_storage_conn_string" >> $GITHUB_ENV
          echo "gateway_host_string=$gateway_host_string" >> $GITHUB_ENV

          ## DO NOT DELETE ##
          # mask this value so this sensitive data won't be logged.
          echo "::add-mask::$init_storage_conn_string"
          echo "::add-mask::$ui_storage_conn_string"

      # Get release zip file
      - name: UI component - Get assets zip
        run: |
          set -o errexit
          set -o nounset

          wget ${UI_BUNDLE}


      # Unzip & Customize (replace values)
      - name: UI component - Unzip and modify
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          unzip mts-trial-ui.zip

          index_file="mts-trial-ui/index.html"
          # sed doesn't like the github {{ }} vars, so dropping the value to a regular var
          trial_name=${{ matrix.trials.trial_name }}

          sed -i "s/{{clientId}}/${ui_client_id}/" ${index_file}
          sed -i "s/{{issuerUrl}}/https:\/\/login.microsoftonline.com\/${tenant_id}\/v2.0/" ${index_file}
          sed -i "s/{{trialName}}/${trial_name}/" ${index_file}
          sed -i "s^{{gatewayUrl}}^${gateway_host_string}/api^" ${index_file}


      # Add Branding Assets
      - name: UI component - copy assets
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          echo "using trial path ${{ matrix.trials.trial_dir }}"
          # copy everything in the assets folder
          cp -fr ${{ matrix.trials.trial_dir }}/assets/* mts-trial-ui/assets/


      # Upload to storage account (to $web container)
      - name: UI component - Upload to storage
        # if: github.ref == 'refs/heads/main'
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # first clean up the container, then upload the new assets
          az storage blob delete-batch --connection-string ${ui_storage_conn_string} --source "\$web" --pattern "*"
          az storage blob upload-batch --connection-string ${ui_storage_conn_string} --source mts-trial-ui --destination '$web'
